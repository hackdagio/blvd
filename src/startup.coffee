###!
# Boulevard
# by Ignacio Trujillo <itrujillo@conceptogroup.cl, ignaces@ignac.es>
# (c) 2015 - 2017 Concepto Group
#
# http://www.conceptogroup.cl
# https://github.com/ignaces
###

# some dependencies
express = require 'express'
errorHandler = require 'errorhandler'
morgan = require 'morgan'
http = require 'http'
compress = require 'compression'
path = require 'path'

# routes
routes = require './routes/index'
api = require './routes/api'
push = require './routes/push'

# config
config = require '../../config.json'

## initializing express
debug = require('debug')('express')
app = module.exports = express()

# defining port
switch process.env.ENV
  when 'dev'
    port = config.port.dev
  when 'edge'
    port = config.port.edge
  else
    port = config.port.prod

app.set 'port', port

# since @ 0.7.0
# now using EJS to render RAW html generated by Jade.
app.engine '.html', require('ejs').renderFile
app.set 'view engine', 'html'
app.set 'views', path.join('..', '/public', '/views')

# enabling the gzip compression
app.use compress()

# declaring public access path
app.use express.static(path.join('..', '/public'))

# using console logs if dev mode is on
if process.env.ENV is 'dev'
  app.use morgan('dev')
  app.use(errorHandler())

# reverse proxy to push
app.use '/push', push

# reverse proxy to kaizen api
app.use '/api', api

# app routes
app.get '/', routes.index
app.get '/partials/*', routes.partials
app.get '/favicon.ico', routes.favicon
app.get '/download', routes.avenue
app.get '/robots.txt', routes.robots
app.get '*', routes.index

# error handlers
process.on 'uncaughtException', (err) ->
  console.error 'uncaughtException: ' + err.message
  console.error err.stack
  console.log 'err'
  # exit with error
  return

if process.env.ENV is 'prod'
  # production error handler
  # no stacktraces leaked to user
  app.use (err, req, res, next) ->
    res.status err.status or 500
    res.render 'error',
      message: err.message
      error: {}
    return
else
  # development error handler
  # will print stacktrace
  app.use (err, req, res, next) ->
    res.status err.status or 500
    res.render 'error',
      message: err.message
      error: err
    return

# starting up
http.createServer(app).listen port, ->
  console.log config.app.name + ' "' + config.product.name + '"'
  console.log 'running at ' + port
  console.log '\x1b[36m', process.env.ENV + ' mode', '\x1b[0m'
  return

module.exports = app
